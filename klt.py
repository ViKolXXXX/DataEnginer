import numpy as np

def f(x):
    """Исходная функция"""
    return x ** 2 + (-1) * x * 14 + 1

def find_minimum():
    k = 0 #Счетчик итераций
    x0 = np.random.randint(-10, 10)  # Выбираем произвольно х^0
    step = 1 # Определяем величину шага
    a, b = None, None # Начальные границы отрезка

    #Находим точку, в которой значение функции будет меньше чем в f(x^0), определяем направление убывания функции
    while True:

        f_x0 = f(x0)  # находим значение функции в x0
        x1 = x0 + step  # Вычисляем новую точку х^0 + шаг
        f_x1 = f(x1) # f(х^0 + шаг)

        if f_x1 < f_x0:
            #если  f(х^0 + шаг)< f(x^0), то полагаем x^1=x^0 + шаг и переходим к этапу 2
            x0 = x1
        else:
            #Если f(х^0 + шаг) > f(x^0), то полагаем шаг = - шаг
            step = -step
            x1 = x0 + step #х^0 + шаг
            f_x1 = f(x1) #f(х^0 + шаг)
            if f_x1 < f_x0:
                x0 = x1
            else:
                #Если f(х^0 + шаг) > f(x^0), то шаг делим на два и переходим к пункту 4а)
                step /= 2  # Уменьшаем шаг

        k += 1

        # Если после 3-Ий итерации  f(х^0 + шаг) = f(x^0), то [а, б] ==[x^0 - шаг, x^0 + шаг]
        if k > 3 and f_x1 == f_x0:
            a, b = x0 - step, x0 + step # Определяем отрезок
            break # выходим из цикла

    print(f"Интервал: [{a}, {b}], Количество итераций {k}")

    # Нахождение точки  минимума функции f(x)= x**2 + ((-1)*x*14 + 1 на отрезке [a,b] с точностью до е=0,1
    e = 0.1
    k = 0
    print("\nk\ta\tb\tx1\tx2\tf(x1)\tf(x2)\t(b-a)/2")
    while (b - a) / 2 > e:

        x1 = (a + b - step) / 2
        x2 = (a + b + step) / 2
        f_x1 = f(x1)
        f_x2 = f(x2)

        print(f"{k}\t{a:.4f}\t{b:.4f}\t{x1:.4f}\t{x2:.4f}\t{f_x1:.4f}\t{f_x2:.4f}\t{(b - a) / 2:.4f}")

        if f_x1 < f_x2:
            b = x2  # Уменьшаем верхнюю границу
        elif f_x1 > f_x2:
            a = x1
        else:
            a = x1
            b = x2

        k += 1


    x_min = (a + b) / 2
    f_min = f(x_min)

    print(f"Минимум функции достигается в x = {x_min}, f(x) = {f_min}")

if __name__ == "__main__":
    find_minimum()

